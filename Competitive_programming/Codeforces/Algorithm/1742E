import math
import bisect
 
def gcd(a,b):
    if(b == 0):
        return a
    else:
        return gcd(b, a % b)
 
def b(a,n):
    i=0
    j=len(a)-1
    mid=(i+j)//2
    if n>=max(a):
        return -1
    while i<=j:
        mid=(i+j)//2
        if a[mid]<=n:
            i=mid+1
        else:
            if mid==0 or mid==len(a)-1:
                return mid
            if a[mid-1]<=n:
                return mid
            j=mid-1
        
    return -2
        
        
 
# coprimes=[]
# for i in range(1,1001):
#     for j in range(1,1001):
#         if gcd(i,j)==1:
#             coprimes.append([i,j])
 
for _ in range(int(input())):
    # n = int(input())
    # a = list(map(int,input().split()))
    n,q=map(int,input().split())
    a = list(map(int,input().split()))
    k = list(map(int,input().split()))
    pres = [0]
    mx=[]
    for i in range(n):
        pres.append(pres[-1]+a[i])
        if i==0:
            mx=[a[i]]
        else:
            mx.append(max(a[i],mx[-1]))
 
    # print(mx,pres)
 
    for i in k:
        ng=bisect.bisect_right(mx,i)
        # print('ng',ng)
        if ng>-1:
            print(pres[ng],end=' ')
        else:
            print(0,end=' ')
    print()
